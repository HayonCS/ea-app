scalar IsoDate
scalar IsoTime
scalar IsoDateTime
scalar ConfigurationDataLimitType
scalar TestPlanLockResponse
scalar TestPlanDocument
scalar TestPlanMetadata
scalar TestPlanConfiguration
scalar Job
scalar JobIdentifier
scalar JobStatus
scalar TesterType
scalar UserSettings
scalar UserAppData
scalar Object
scalar EmployeeInfoResponse
scalar ProcessDataExport
scalar RunningNowItem

type AssetInfo {
  assetName: String!
  serial: String!
  model: String!
  orgCode: String!
  line: String!
  dateCreated: String!
  notes: String!
  reportGroupName: String
  reportGroupID: String
  excludeFromHealth: Boolean!
  legacyLocation: String
  autoUpdate: Boolean!
  recordLastUpdated: String!
  updatedBy: String!
}

"""
Information about the state of individual servers and endpoints.
"""
type ServerState {
  endpoint: String
  authType: String
  prodDatabaseServer: String
  prodDatabaseName: String
  engDatabaseServer: String
  engDatabaseName: String
  configLocation: String
  dcigenLocation: String
  userValidationAPI: String
  userPictureAPI: String
  userInfoAPI: String
}

# type Requirements {
#   feature: Feature!
# }

"""
A single evaluation and all of the information required to represent it.
"""
type Evaluation {
  id: String!
  identifier: String!
  interstitialLoopDelay: String
  interstitialRetryDelay: String
  description: String!
  evaluationType: String
  highLimit: String
  jump: String
  jumpOnFail: String
  jumpOnPass: String
  jumpReturn: String
  loop: String
  lowLimit: String
  onEvaluate: String
  postExecuteDelay: String
  preExecuteDelay: String
  retry: String
  runtimeResume: String
  skipped: String
  subroutine: String
  target: String
  tolerance: String
  updateTestMetrics: String
  value: String
}

"""
The type sent back after a test plan creation operation from the server.
"""
type TestPlanCreationResponse {
  TestPlanID: Int!
  ReturnCode: Int!
  Message: String
}

"""
A type which represents the json information sent back from the mes user info endpoint.
This is meant to represent a single user's information.
"""
type MesUserInfo {
  username: String!
  firstName: String!
  lastName: String!
  emailAddress: String!
  employeeId: String!
  isServiceAccount: Boolean!
  pager: String
  roles: [String!]!
  distributionLists: [String!]!
}

type ErphrLocation {
  locationId: Int
  locationCode: String
  description: String
  inventoryOrgCode: Int
  inventoryOrgId: Int
}

"""
The base type for a test plan search result.
"""
type TestPlanSearchResult {
  Name: String!
  Revision: Int
  RevisionLabel: String
}

"""
An input type used for representing a semantic version.
"""
input SemanticVersion {
  major: Int
  minor: Int
  patch: Int
}

"""
A list of recent test plans objects.
"""
type RecentTestPlans {
  recentTestPlans: [RecentTestPlan!]!
}

"""
A single recent test plan.  Users will have one or more recent test plans
associated with them if they have recently opened (not just modified) a test plan.
"""
type RecentTestPlan {
  testPlanName: String!
  domain: Domain!
  revision: Int!
  lastModifiedDate: String
  lastModifiedUserName: String
}

###################################################################
"""
Local path information pertaining to the libraries associated with a test plan.
"""
type LocalPathInformation {
  library: [Library]
}

###################################################################
"""
The result type sent back after analysis on a test plan is complete.
"""
type AnalyzerResult {
  id: String!
  type_id: String!
  description: String!
}

"""
A type used to represent the current status of the Job sent back from a
call to analyze a singular test plan.
"""
type AnalyzerJobStatus {
  jobUuid: String!
  status: String!
  results: [AnalyzerResult]!
}

###################################################################
type StationWatcherUser {
  computerName: String!
}

input StationWatcherUserInput {
  computerName: String!
}

type StationWatcherInformation {
  computerName: String!
  database: String!
  transport: String!
  testerVersion: Int!
}

input StationWatcherInformationInput {
  computerName: String!
  database: String!
  transport: String!
  testerVersion: Int!
}

type StationWatcherState {
  numberOfStationsRunning: Int!
  numberOfStations: Int!
  lastSeen: String!
}

input StationWatcherStateInput {
  numberOfStationsRunning: Int!
  numberOfStations: Int!
  lastSeen: String!
}

type StationWatcherResult {
  legacyReturnCode: String!
  legacyReturnText: String!
  stationsClosed: Boolean!
}

input StationWatcherResultInput {
  legacyReturnCode: String!
  legacyReturnText: String!
  stationsClosed: Boolean!
}

type StationWatcherMessage {
  info: StationWatcherInformation
  state: StationWatcherState
  operation: String!
  result: StationWatcherResult
  webId: String!
}

input StationWatcherMessageInput {
  info: StationWatcherInformationInput
  state: StationWatcherStateInput
  operation: String!
  result: StationWatcherResultInput
  webId: String!
}

type GraphQLPayloadData {
  stationWatchers: [StationWatcherMessage]!
}

input GraphQLPayloadDataInput {
  stationWatchers: [StationWatcherMessageInput]!
}

type GraphQLPayload {
  data: GraphQLPayloadData
}

input GraphQLPayloadInput {
  data: GraphQLPayloadDataInput
}

type StationWatcherGraphQLMessage {
  type: String!
  id: String!
  payload: GraphQLPayload
}

input StationWatcherGraphQLMessageInput {
  type: String!
  id: String!
  payload: GraphQLPayloadInput
}

###################################################################
"""
Represents the current state of a test station including phase and error information.
"""
type TestStationState {
  isUp: Boolean!
  phase: String!
  errorMessage: String!
  arrayIndex: Int!
  sequenceIdentifier: Int!
  serialNumber: String!
  executionId: String!
}

"""
An input type for test station state.
"""
input TestStationStateInput {
  isUp: Boolean!
  phase: String!
  errorMessage: String!
  arrayIndex: Int!
  sequenceIdentifier: Int!
  serialNumber: String!
  executionId: String!
}

"""
Test station assignment information used for configuration and association.
"""
type AssignmentInformation {
  testplan: String!
  revision: String!
  station: String!
  partNumber: String!
  code: String!
  executableIds: [String!]!
  breakPointIds: [String!]!
  port_start: Int!
  port_end: Int!
}

"""
The input type for test station assignment information.
"""
input AssignmentInformationInput {
  testplan: String!
  revision: String!
  station: String!
  partNumber: String!
  code: String!
  executableIds: [String!]!
  breakPointIds: [String!]!
  port_start: Int!
  port_end: Int!
}

type ItemValue {
  name: String!
  value: String!
  updated: Boolean!
}

input ItemValueInput {
  name: String!
  value: String!
  updated: Boolean!
}

"""
A type to represent a log message with the corresponding index.
"""
type LogMessage {
  index: Int!
  msg: String!
}

"""
The input type for the log message type.
"""
input LogMessageInput {
  index: Int!
  msg: String!
}

"""
The type used to represent a result for an item passed in a Test Station message.
"""
type ItemResult {
  id: String!
  state: String!
  time: Int!
  loop: Int!
  retry: Int!
  values: [ItemValue]!
  logs: [LogMessage]!
  errors: [String!]!
}

"""
The input type used to represent a result for an item passed in a Test Station message.
"""
input ItemResultInput {
  id: String!
  state: String!
  time: Int!
  loop: Int!
  retry: Int!
  values: [ItemValueInput]!
  logs: [LogMessageInput]!
  errors: [String!]!
}

"""
Result information pertaining to the execution of a test plan.
"""
type ExecuteResults {
  lines: String!
  extended: String!
  dumps: String!
  formattedResults: String!
  logMessage: String!
  time: Int!
  label: String!
  payload: String!
}

"""
The input type for execution results of a test plan.
"""
input ExecuteResultsInput {
  lines: String!
  extended: String!
  dumps: String!
  formattedResults: String!
  logMessage: String!
  time: Int!
  label: String!
  payload: String!
}

"""
Represents a message used to communicate to and from a Test Station.
"""
type TestStationMessage {
  type: String!
  webId: String!
  computerName: String!
  stationName: String!
  itemResults: [ItemResult]!
  state: TestStationState
  assignment: AssignmentInformation
  executeResults: ExecuteResults
}

"""
This is the input type which represents a message used to communicate to and from a Test Station.
"""
input TestStationMessageInput {
  type: String!
  webId: String!
  computerName: String!
  stationName: String!
  itemResults: [ItemResultInput]!
  state: TestStationStateInput
  assignment: AssignmentInformationInput
  executeResults: ExecuteResultsInput
}

type TestStationGraphQLPayloadData {
  testStations: TestStationMessage
}

input TestStationGraphQLPayloadDataInput {
  testStations: TestStationMessageInput
}

type TestStationGraphQLPayload {
  data: TestStationGraphQLPayloadData
}

input TestStationGraphQLPayloadInput {
  data: TestStationGraphQLPayloadDataInput
}

type TestStationGraphQLMessage {
  type: String!
  id: String!
  payload: TestStationGraphQLPayload
}

input TestStationGraphQLMessageInput {
  type: String!
  id: String!
  payload: TestStationGraphQLPayloadInput
}

###################################################################
"""
Where input for queries that take an employee number.
"""
input EmployeeNumberWhereInput {
  employeeNumber: Int!
}

"""
Where input for queries that take an employee email.
"""
input EmployeeEmailWhereInput {
  employeeEmail: String!
}

"""
Type used to represent the path for a particular user picture.
"""
type UserPictureResponse {
  picturePath: String!
}

# type BindingCallArgument {
#   name: String!
#   value: String! # TBD do other types too
# }

"""
A type with all of the information required to represent a binding call.
"""
type BindingCall {
  id: String!
  identifier: String!
  description: String!
  interstitialLoopDelay: String
  interstitialRetryDelay: String
  jump: String
  jumpOnError: String
  jumpReturn: String
  loop: String
  method: String
  postExecuteDelay: String
  preExecuteDelay: String
  retry: String
  runtimeResume: String
  skipped: String
  subroutine: String
  updateTestMetrics: String
  # arguments: [BindingCallArgument!]!
}

"""
A union type representing the possible children of a group.
"""
union GroupChild = BindingCall | Evaluation

"""
A singular group and all of the information required to represent it.
"""
type Group {
  id: String!
  children: [GroupChild!]!
  identifier: String!
  description: String!
  interstitialLoopDelay: String
  interstitialRetryDelay: String
  loop: String
  postExecuteDelay: String
  preExecuteDelay: String
  retry: String
  skipped: String
}

"""
A singular part number and all of the information required to represent it.
"""
type PartNumber {
  id: String!
  groups: [Group!]!
  identifier: String!
  description: String!
  arrayCode: String!
  arrayType: String!
  bundlemanagement: String!
}

"""
A singular station and all of the information required to represent it.
"""
type Station {
  id: String!
  partNumbers: [PartNumber!]!
  description: String!
  identifier: String!
  # userName: String!
  # modificationTime: IsoDateTime!
}
"""
A type representing the top level "Tests" element in a test plan.
"""
type Tests {
  id: String!
  stations: [Station!]!
  identifier: String!
  description: String!
  # userName: String!
  # modificationTime: IsoDateTime!
}

# type Fixturing {
# }

# type Flow {
# }

"""
A type representing a test plan revision.
"""
type Revision {
  revisionNumber: Int!
  label: String
}

"""
A type representing a singular top level "TestPlan" element.
"""
type TestPlan {
  id: String!
  tests: Tests
  # requirements: [Requirement!]!
  # fixturing: Fixturing!
  # flow: Flow!
  name: String!
  revision: Revision!
  softwareVersion: String!
  configurationData: TestPlanConfigurationData!
  document: TestPlanDocument
  metadata: TestPlanMetadata
  configuration: TestPlanConfiguration
}
"""
Represents an individual revision of a test plan.
"""
type TestPlanRevisionEntry {
  RevNumber: Int!
  LastEditor: String!
  LastEdit: String!
  RevLabel: String!
  LogMessage: String
}
"""
A type representing the most recent and latest revision.
"""
type LatestRevision {
  RevNumber: Int
}
"""
An array of revision entries representing all of the revisions of a test plan.
"""
type TestPlanRevs {
  revs: [TestPlanRevisionEntry!]!
}

"""
An array of test plan library entries to represent all of the items in the test plan library.
"""
type TestPlansLibrary {
  testPlanLib: [TestPlanLibraryEntry!]!
}

"""
All of the required information to represent a single test plan library entry.
"""
type TestPlanLibraryEntry {
  PlanTitle: String!
  Type: String!
  Version: String!
  LastEditor: String!
  LastEdit: String!
  RevLabel: String!
}

"""
A input type for specifying the name of a test plan.
"""
input TestPlanWhereNameInput {
  name: String!
}

"""
A where input type to represent an individual revision of a test plan.
"""
input TestPlanWhereUniqueInput {
  name: String!
  revisionNumber: Int
}

"""
An input array of strings for searching for a test plan.
"""
input TestPlanWhereInput {
  name_in: [String!]
}
"""
An input type used as a filter for global configuration data.
"""
input ConfigurationDataGlobalVariableFilter {
  partNumber: String
  ecoName: String
  configurationDataKey: String
  configurationDataValue: String
}

"""
An input type used as a filter for local configuration data.
"""
input ConfigurationDataLocalVariableFilter {
  partNumber: String
  stationName: String
  ecoName: String
  configurationDataKey: String
  configurationDataValue: String
}

input ConfigurationDataLimitFilterInput {
  partNumber: String
  stationName: String
  type: ConfigurationDataLimitType
  ecoName: String
  tagName: String
}

"""
A list of reserved test plan keywords .
"""
type ReservedKeywords {
  keywords: [String!]!
}

"""
A type with all of the information required to specify the configuration data for a test plan.
"""
type TestPlanConfigurationData {
  name: String!
  globals(
    where: ConfigurationDataGlobalVariableFilter
  ): [ConfigurationDataGlobalVariable!]!
  locals(
    where: ConfigurationDataLocalVariableFilter
  ): [ConfigurationDataLocalVariable!]!
  limits(where: ConfigurationDataLimitFilterInput): [ConfigurationDataLimit!]!
  stations: [StationConfigurationData!]!
  partNumbers: [PartNumberConfigurationData!]!
}

"""
The configuration data that pertains to a station in a test plan.
"""
type StationConfigurationData {
  stationName: String!
  limits(where: ConfigurationDataLimitFilterInput): [ConfigurationDataLimit!]!
  locals(
    where: ConfigurationDataLocalVariableFilter
  ): [ConfigurationDataLocalVariable!]!
  globals(
    where: ConfigurationDataGlobalVariableFilter
  ): [ConfigurationDataGlobalVariable!]!
}

"""
The configuration data that pertains to a part number in a test plan.
"""
type PartNumberConfigurationData {
  partNumber: String!
  limits(where: ConfigurationDataLimitFilterInput): [ConfigurationDataLimit!]!
  locals(
    where: ConfigurationDataLocalVariableFilter
  ): [ConfigurationDataLocalVariable!]!
  globals(
    where: ConfigurationDataGlobalVariableFilter
  ): [ConfigurationDataGlobalVariable!]!
}

union ConfigurationDataLimit = SpecLimit

"""
A box value representing a Float.
"""
type FloatBox {
  value: Float!
}

"""
A box value representing a String.
"""
type StringBox {
  value: String!
}

"""
A union type that can either be a Float or a String
"""
union FloatOrString = FloatBox | StringBox

"""
A type that represents a limit used in the Configuration Data of a test plan.
"""
type SpecLimit {
  type: ConfigurationDataLimitType!
  partNumber: String!
  stationName: String!
  ecoName: String!
  tagName: String!
  description: String!
  highLimit: FloatOrString!
  lowLimit: FloatOrString!
  measuredValue: FloatOrString!
  ignoreCalcCheck: Boolean!
}

"""
A type representing a Global variable used in Configuration Data.
"""
type ConfigurationDataGlobalVariable {
  partNumber: String!
  ecoName: String!
  configurationDataKey: String!
  configurationDataValue: String!
}

"""
A type representing a Local variable used in Configuration Data.
"""
type ConfigurationDataLocalVariable {
  stationName: String!
  partNumber: String!
  ecoName: String!
  configurationDataKey: String!
  configurationDataValue: String!
}

"""
An enum type representing the direction of flow for a parameter in a binding call library.
"""
enum LibraryFunctionParamDirection {
  IN
  OUT
  RETURN
}

"""
A type used to represent a parameter in a binding call library.
"""
type LibraryFunctionParam {
  name: String!
  description: String!
  direction: LibraryFunctionParamDirection!
  type: String!
  default: String!
  enumName: String!
}
"""
A type that represents a function within a given binding call library.
"""
type LibraryFunction {
  name: String!
  description: String!
  className: String
  classDescription: String
  params: [LibraryFunctionParam!]!
}

type LibraryEnumEntry {
  description: String!
  name: String!
  value: Int!
}

type LibraryEnum {
  name: String!
  description: String!
  entries: [LibraryEnumEntry!]!
}
"""
A type that represents an instance of a binding call library at a specific version.
"""
type VersionedLibrary {
  platformName: String!
  versionNumber: String!

  documentationLink: String
  enums: [LibraryEnum!]!
  functions: [LibraryFunction!]!
  isCurrentRelease: Boolean!
  versionControlUrl: String
}
"""
A type that represents a binding call library.
"""
type Library {
  libraryName: String!
  versions: [VersionedLibrary!]!
}
"""
Binding call library Unique Where input type.
"""
input LibraryWhereUniqueInput {
  libraryName: String!
}
"""
Where input for a binding call library.
"""
input LibrariesWhereInput {
  libraryName_in: [String!]
  libraryName_re: String
}

"""
Input type for a unique TestPlan Document.
"""
input TestPlanDocumentWhereUniqueInput {
  testPlanName: String!
  revisionNumber: Int
}

input HelpInfoClue {
  name: String
  value: String
}

input HelpInfoContext {
  key: String
  clues: [HelpInfoClue]
}

type HelpSection {
  helpType: String
  title: String
  text: String
}

"""
Used to represent help information to display for a given context.
"""
type HelpInfo {
  key: String
  titleText: String
  body: [HelpSection]
}

"""
The enum used to specify particular domains.
"""
enum Domain {
  Production
  Engineering
}

type Query {
  """
  Used to obtain mes user info endpoint information associated with the provided user id input.
  """
  mesUserInfo(
    employeeNumberOrUsername: String!
    includeGroups: Boolean
  ): MesUserInfo!

  """
  Used to obtain employee info endpoint information associated with the provided employee number input.
  """
  employeeInfo(employeeNumberOrEmail: String!): EmployeeInfoResponse!

  employeeDirectory: [EmployeeInfoResponse!]!

  assetListBi: [AssetInfo]!

  getAssetsName(nameOrKeyword: String!): [AssetInfo]!

  getAssetByName(assetName: String!): AssetInfo

  getUserAppData(userId: String!): UserAppData!

  getProcessDataExport(
    asset: String!
    startDate: String!
    endDate: String!
  ): [ProcessDataExport]!

  getProcessDataRedis(asset: String!, date: String!): [ProcessDataExport]!

  getAssetsRunningNow: [RunningNowItem!]!

  """
  Displays information about the current server configuration including the current
  endpoints and api urls used.
  """
  serverInfo: ServerState!

  """
  Returns the path to the user picture associated with the employee that has the given user id.
  """
  userPicture(employeeId: String!): UserPictureResponse!

  """
  Provides information about the current lock state of the associated test plan including
  information about when the lock will expire if applicable.
  """
  testPlanLockState(
    domain: Domain!
    testPlanName: String!
  ): TestPlanLockResponse

  """
  Returns a list of all lock test plans as well as information about the current locker
  and when the lock will expire.
  """
  lockedTestPlans: [TestPlanLockResponse]

  """
  Provides a list of all reserved test plan keywords.
  """
  reservedKeywords: ReservedKeywords!

  """
  Request information about an individual test plan using a unique test plan input (name and revision)
  """
  testPlan(domain: Domain!, where: TestPlanWhereUniqueInput!): TestPlan

  """
  Request information about any test plans matching the test plan input.
  """
  testPlans(domain: Domain!, where: TestPlanWhereInput): [TestPlan!]!
  """
  Request a collection of testplans and their associated info from the given domain.
  """
  testPlanLibrary(domain: Domain!, includeHidden: Boolean): TestPlansLibrary!
  """
  Request a list of revisions associated with the given test plan in the given domain.
  """
  testPlanRevisions(domain: Domain!, where: TestPlanWhereInput!): TestPlanRevs!

  """
  Request individual revision information about an individual test plan in the specified domain.
  """
  testPlanRevision(
    domain: Domain!
    where: TestPlanWhereUniqueInput!
  ): TestPlanRevisionEntry

  """
  Request latest revision information about an individual test plan in the specified domain.
  """
  testPlanLatestRevision(
    domain: Domain!
    where: TestPlanWhereNameInput!
  ): LatestRevision!

  """
  Request library and version information for the DCIGen library with the given name.
  """
  library(where: LibraryWhereUniqueInput!): Library
  """
  Request library and version information for any DCIGen library match using a given string or a regular expression.
  """
  libraries(where: LibrariesWhereInput): [Library!]!

  """
  Returns status information about the Job or Jobs specified in the given jobIdentifiers list.
  """
  jobStatus(jobIdentifiers: [JobIdentifier!]!): JobStatus!

  """
  Request information about all of the available station watchers.
  """
  stationWatchers: [StationWatcherMessage!]!

  localPaths(domain: Domain!, testPlanName: String!): [LocalPathInformation]

  """
  Request help information for a given context.
  """
  helpInformation(context: HelpInfoContext!): HelpInfo

  """
  Search for a test plan that contains a library with an optional version specification.
  """
  searchForTestPlanByLibrary(
    domain: Domain!
    libraryName: String!
    version: SemanticVersion
  ): [TestPlanSearchResult]!

  """
  Search for a test plan that contains an element with the given description.
  """
  searchForTestPlanByElementDescription(
    domain: Domain!
    description: String!
  ): [TestPlanSearchResult]!

  """
  Search for a test plan that contains a tester of the given type, which is typically a prefix used by a test station.  Will work with partial matches as well.
  """
  searchForTestPlanByTesterType(
    domain: Domain!
    testerType: TesterType!
    includeHidden: Boolean
  ): [TestPlanSearchResult]!
}

type Mutation {
  """
  Mutation to save a user's app data to redis.
  """
  setUserAppData(userId: String!, appData: UserAppData!): Boolean!

  """
  The mutation used to a save a new Recent Test Plan entry for a specific user.  This entry will show up on the Dashboard in the Recent Test Plans list.
  """
  saveRecentTestPlan(
    userName: String!
    testPlanName: String!
    domain: Domain!
  ): RecentTestPlans!

  """
  A mutation called to create a new Test Plan in the TestPlan Database.  Returns data about the Test Plan upon successful creation.
  """
  createTestPlan(
    domain: Domain!
    testPlanName: String!
    userName: String!
  ): TestPlanCreationResponse!

  """
  A mutation used to save changes to an existing Test Plan.
  """
  saveTestPlanDocument(
    domain: Domain!
    document: TestPlanDocument!
    metadata: TestPlanMetadata!
    jobUuid: String!
  ): Job!

  """
  Sets a key/value pair within redis which locks a given test plan for a specific user.  This will fail if
  the test plan is already locked and will return a message with the current locking user.
  """
  lockTestPlan(
    lockState: Boolean!
    testPlanName: String!
    domain: Domain!
    employeeNumber: Int!
  ): TestPlanLockResponse!

  """
  Saves the configuration to the specified test plan.
  """
  saveTestPlanConfiguration(
    testerType: String!
    testPlanName: String!
    configuration: TestPlanConfiguration!
    document: TestPlanDocument!
    jobUuid: String!
    userName: String!
    commitMessage: String!
  ): Job!

  """
  Associates the given user and computer to the station watcher.
  """
  setStationWatcherUser(
    userName: String!
    computerName: String!
  ): StationWatcherUser!

  """
  Sends the supplied message to the station watcher instance.
  """
  updateStationWatcher(
    message: StationWatcherMessageInput
  ): StationWatcherMessage!

  """
  Sends the supplied message to the test station instance.
  """
  updateTestStation(message: TestStationMessageInput): TestStationMessage!

  """
  Runs the analysis job on the saved test plan and returns the associated Job.
  """
  analyzeSavedTestPlan(
    testPlanName: String!
    revision: Int!
    domain: Domain!
    jobUuid: String!
  ): Job!

  """
  Cancel the analyzer call.
  """
  cancelAnalyzerJob(jobUuid: String): AnalyzerJobStatus!

  postLocalPath(
    localPath: String!
    xmlContents: String!
    testPlanName: String!
    domain: Domain!
  ): LocalPathInformation!

  """
  Trigger a re-cache of the DCIGen versioned libraries.
  """
  invalidateVersionedLibraries: String!
}

type Subscription {
  """
  Alerts any subscribers of changes to any test plan locks.
  """
  lockChanged: TestPlanLockResponse!
  stationWatchers(computerName: String!): [StationWatcherMessage!]!
  testStations(computerName: String!, stationName: String!): TestStationMessage!
}
